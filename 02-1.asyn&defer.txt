// 드림코딩 유튜브 
console.log() 를 이용해서 console 창에 출력하기
console.log("Hello World"); 

출력 방법 
1. cmd에서 명령어 (node main.js)를 입력해서 출력
2. chrome 창에서 개발자도구 F12의 console 에서 출력

 
공식 사이트
1. https://ecma-international.org/
2. https://developer.mozilla.org/ko/docs/Web/JavaScript


async vs defer
HTML에서 JavaScript를 포함할 때 어떤 것이 더 효율적인가?


브라우저가 한줄한줄씩 분석(파싱) -> 돔요소로 바꾼다

1. head 태그 안에 script 태그가 있을 때
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script src="main.js"></script>
</head>
<body>
    
</body>
</html>
- html 을 파싱하다가 script 태그를 보면 .js 파일을 다운 받아야하네~라고 생각해서
잠깐 멈추고 파일을 다운 받고나서 파싱하는 부분으로 간다.
- 단점 : .js 파일을 다운받을 때 시간이 오래 걸리면, 
        사이트가 화면에 나오기 까지 시간이 많이걸린다

2. body 태그 끝에 script 태그가 있을 때
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    ...
    ...
    <script src="main.js"></script>
</body>
</html>
- 브라우저는 html 을 다운 받아서 쭉 파싱해서 페이지가 준비가 된 다음, .js 를 서버에서 받아오고(패칭) 실행한다.
- 그래서  .js 파일은 다운 받기 전에 이미 페이지가 준비가 되어있어서 사용자들이 페이지를 미리 볼 수 있다.
- 단점 : 사이트가 JavaScript에 의존적인 경우, 의미있는 페이지를 보기까지 시간이 많이걸린다.
        fetching js (JavaScript파일을 서버에서부터 다운로드)하고 executing js (실행)까지 기다려야지 의미있는 화면을 볼 수 있다.

3. head 태그 안에 asyn(에이싱크)라는 속성값을 이용
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script asyn src="main.js"></script>
</head>
<body>
    
</body>
</html>
- asyn 옵션 : boolean 타입으로써, 선언하는 것으로도 true 값을 가진다.
- html을 파싱하면서 asyn 태그를 만나면 .js파일을 다운로드(fetching js) 하라는 명령을 하고
- 병렬로 (파싱 + 패칭) 작업이 진행된다.
- 패칭(.js 파일을 다운로드)이 다되면 파싱을 멈추고 executing js(.js 실행) 하고 나머지 html 을 파싱하게 된다.
- 장점 : 2에 비해서 병렬로 작업하기 때문에 .js 다운로드 시간을 줄일 수 있다.
- 단점 : html이 파싱되기 전에 실행되기 때문에 조작시점에 html의 요소가 정의되어있지 않으면, 작업을 할 수 없고,
        html 실행하는 동안에 html 을 멈추기 때문에 여전히 사용자가 화면을 보기에는 시간이 소요된다.

4. head 태그 안에 defer라는 속성값을 이용
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <script defer src="main.js"></script>
</head>
<body>
    
</body>
</html>
- defer 옵션 : html을 파싱하다가 defer를 만나면 .js를 다운로드 받으라는 명령만 시키고,
                나머지 html 을 끝까지 파싱한다. 파싱이끝나면 다운로드된 JavaScript 파일을 executing js (실행) 한다.


3 vs 4 (여러 .js 파일 다운로드 시에)
- asyn 옵션은 script 의 순서대로 JavaScript를 실행시키는 것이 아니라! 먼저 다운로드 된 순서대로 실행시킨다.
(순서가 중요한 코드라면 .. ? 순서를 지킬 수 없다)

- defer 옵션은 필요한 JavaScript 파일을 다 다운로드 받아놓은 다음에, 순서대로 실행하기 때문에 (정의한 순서대로 스크립트 실행된다)



